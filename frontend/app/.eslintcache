[{"/home/darentang/projects/real-life-among-us/frontend/app/src/components/EndGame.js":"1","/home/darentang/projects/real-life-among-us/frontend/app/src/index.js":"2","/home/darentang/projects/real-life-among-us/frontend/app/src/App.js":"3","/home/darentang/projects/real-life-among-us/frontend/app/src/utilities/socket-context.js":"4","/home/darentang/projects/real-life-among-us/frontend/app/src/components/Console.js":"5","/home/darentang/projects/real-life-among-us/frontend/app/src/utilities/lobbies.js":"6","/home/darentang/projects/real-life-among-us/frontend/app/src/components/Vote.js":"7","/home/darentang/projects/real-life-among-us/frontend/app/src/components/Game.js":"8","/home/darentang/projects/real-life-among-us/frontend/app/src/reportWebVitals.js":"9","/home/darentang/projects/real-life-among-us/frontend/app/src/components/Login.js":"10","/home/darentang/projects/real-life-among-us/frontend/app/src/components/Dev.js":"11","/home/darentang/projects/real-life-among-us/frontend/app/src/components/Lobby.js":"12","/home/darentang/projects/real-life-among-us/frontend/app/src/components/Connect.js":"13"},{"size":1640,"mtime":1608726910467,"results":"14","hashOfConfig":"15"},{"size":555,"mtime":1608470147241,"results":"16","hashOfConfig":"15"},{"size":3243,"mtime":1608707478382,"results":"17","hashOfConfig":"15"},{"size":102,"mtime":1608120293638,"results":"18","hashOfConfig":"15"},{"size":14502,"mtime":1608728749097,"results":"19","hashOfConfig":"15"},{"size":23923,"mtime":1608546501971,"results":"20","hashOfConfig":"15"},{"size":4122,"mtime":1608441613290,"results":"21","hashOfConfig":"15"},{"size":18848,"mtime":1608707954557,"results":"22","hashOfConfig":"15"},{"size":362,"mtime":1607673413988,"results":"23","hashOfConfig":"15"},{"size":7005,"mtime":1608692686353,"results":"24","hashOfConfig":"15"},{"size":5805,"mtime":1608722401939,"results":"25","hashOfConfig":"15"},{"size":4286,"mtime":1608430632550,"results":"26","hashOfConfig":"15"},{"size":3348,"mtime":1608722239554,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},"8efhwh",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"33"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"33"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"33"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"33"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"33"},"/home/darentang/projects/real-life-among-us/frontend/app/src/components/EndGame.js",["63"],"import React, {useState, useEffect} from 'react';\nimport Container from 'react-bootstrap/esm/Container';\n\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Button from 'react-bootstrap/Button';\n\nimport { useHistory } from \"react-router-dom\";\n\nfunction EndGame() {\n    const [info, setInfo] = useState({who: '', imposters: [], success: false})\n    const [success, setSuccess] = useState(false);\n    const history = useHistory();\n    useEffect(() => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({})\n        };\n\n        fetch(sessionStorage.getItem('api-host')+'api/who_won', requestOptions).then(response => response.json()).then((data)=>{\n            console.log(data);\n            if (data.success) {\n                setSuccess(true);\n                setInfo(data);\n            } else {\n                history.push('/');\n            }\n        })\n    }, []);\n    return (\n        <Container>\n            <Jumbotron>\n                {success &&\n                    <div>\n                        <h1>This is the End!</h1>\n        \n                        <p>The {info.who} won. </p>\n                        <p>The imposters are {info.imposters.join(',')}</p>\n                        <Button onClick={()=>history.push('/')}>\n                            Return\n                        </Button>\n                    </div>\n                }\n                {!success &&\n                    <h1>Oops the game has not ended.</h1>\n                }\n            </Jumbotron>\n        </Container>\n    );\n}\n\nexport default EndGame;","/home/darentang/projects/real-life-among-us/frontend/app/src/index.js",[],["64","65"],"/home/darentang/projects/real-life-among-us/frontend/app/src/App.js",["66","67"],"/home/darentang/projects/real-life-among-us/frontend/app/src/utilities/socket-context.js",[],"/home/darentang/projects/real-life-among-us/frontend/app/src/components/Console.js",["68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93"],"/home/darentang/projects/real-life-among-us/frontend/app/src/utilities/lobbies.js",["94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113"],"/home/darentang/projects/real-life-among-us/frontend/app/src/components/Vote.js",["114","115","116","117","118","119","120","121","122"],"import React, { useEffect, useState, useContext } from \"react\";\n// import io from 'socket.io-client';\nimport io from 'socket.io-client';\nimport Container from 'react-bootstrap/Container';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\n\nimport { useHistory } from \"react-router-dom\";\n\nimport {PlayerVote, Timer} from \"../utilities/lobbies.js\"\nimport SocketContext from '../utilities/socket-context'\n\nfunction Vote() {\n    const [tally, setTally] = useState({tally: [], meeting_state: 'discussion'});\n    const [profile, setProfile] = useState({is_imposter: false, imposter_list: [], username: ''});\n    const [disable, setDisable] = useState(false);\n    const [showResults, setShowResults] = useState(false);\n    const [result, setResult] = useState('');\n\n    const handleClose = () => setShowResults(false);\n\n    const token = sessionStorage.getItem('game-token');\n    const history = useHistory();\n\n    // no token then return to homepage\n    if (token == null) {\n        history.push('/');\n    }\n\n    // let socket;\n    const socket = useContext(SocketContext);\n\n    useEffect(()=> {\n        socket.on('end meeting message', (data) => {\n            setShowResults(true);\n            setResult(data.message);\n        })\n    });\n    \n    useEffect(() => {\n        // send a go online signal and request user list\n        socket.emit(\"go online\", {token: token, class: 'player', id:-1});\n\n\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({token: token})\n        };\n\n        fetch(sessionStorage.getItem('api-host')+'api/player_profile', requestOptions).then(response => response.json()).then((data) => {\n            setProfile(data);\n            if (!data.success) {\n                console.log('pushing lobby');\n                history.push('/lobby');\n            }\n\n            if (data.game_state != \"meeting\") {\n                console.log('pushing game 1');\n                history.push('/game');\n            }\n        });\n    }, []);    \n\n    useEffect(() => {\n        // when receiving a lobby list, update playerList state.\n        // If not successful, return to home page.\n        socket.on(\"meeting update\", (data) => {\n            setTally(data);\n            if (data.meeting_state != 'vote') {\n                setDisable(true);\n            } else {\n                setDisable(false);\n            }\n        });\n        for (var i in tally.tally) {\n            if (tally.tally[i].id == profile.id && tally.tally[i].vote_for != null) {\n                setDisable(true);\n            }\n        }\n\n    });\n\n\n    useEffect(() => {\n        if (socket){\n            socket.on('change state', (data) => {\n                if (data.state == 'game'){\n                    console.log('pushing game 2');\n                    history.push('/game');\n                }\n\n            });\n        }\n    });\n\n\n    return(\n        <Container>\n            {(tally.meeting_state == \"start\") &&\n                <Jumbotron>\n                    <h1>Waiting for meeting to start...</h1>\n                </Jumbotron>\n            }\n            {(tally.meeting_state != \"start\") &&\n    \n                <Container>\n                    <Timer socket={socket} tally={tally}/>\n                    <PlayerVote tally={tally} selfName={profile.username} token={token} disable={disable}/>\n                </Container>\n            }\n\n            <Modal show={showResults} onClose={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>\n                        Result\n                    </Modal.Title>\n                    </Modal.Header>\n                        <Modal.Body>\n                            {result}\n                        </Modal.Body>\n                    <Modal.Footer>\n                    <Button variant=\"primary\" onClick={handleClose}>\n                        Ok\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </Container>\n    );\n}\n\n\nexport default Vote;","/home/darentang/projects/real-life-among-us/frontend/app/src/components/Game.js",["123","124","125","126","127","128","129","130","131","132"],"import React, {useEffect, useState, useContext} from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport Container from 'react-bootstrap/Container';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Card from 'react-bootstrap/Card';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Toast from 'react-bootstrap/Toast';\nimport {useForm} from 'react-hook-form';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\n\nimport SocketContext from '../utilities/socket-context'\n\nimport {ArrowRepeat} from 'react-bootstrap-icons'\n\nimport {CountdownTimer, ReactorMeltdown} from '../utilities/lobbies'\n\nfunction Home(props) {\n\n    const profile = props.profile;\n    const token = props.token;\n    const history = props.history;\n\n    const [showProfile, setShowProfile] = useState(false);\n    const [showDead, setShowDead] = useState(false);\n    const handleCloseProfile = () => setShowProfile(false);\n    const handleCloseDead = () => setShowDead(false);\n\n\n\n    return (\n        <Container>\n            \n            <Row>\n                <Col>\n                    <CardDeck>\n                        <Card>\n                            <Card.Header as=\"h5\">Your Role</Card.Header>\n                            <Card.Body>\n                                <Card.Text>Click the button below to find out if you're a crewmate or an imposter.</Card.Text>\n                            </Card.Body>\n                            <Card.Footer>\n                                <Button onClick={() => {setShowProfile(true);}}>Who am I?\n                                </Button>\n                            </Card.Footer>\n                        </Card>\n\n                        <Card>\n                            <Card.Header as=\"h5\">If You're Killed...</Card.Header>\n                            <Card.Body>\n                                <Card.Text>Click the button below to let the game know that you're dead.</Card.Text>\n                            </Card.Body>\n                            <Card.Footer>\n                                <Button variant=\"danger\" onClick={() => setShowDead(true)}>\n                                    I am dead!\n                                </Button>\n                            </Card.Footer>\n                        </Card>\n\n                        <Card>\n                            <Card.Header as=\"h5\">Report Body</Card.Header>\n                            <Card.Body>\n                                <Card.Text>See a dead body? Click the button below to report it.</Card.Text>\n                            </Card.Body>\n                            <Card.Footer>\n                                <Button variant=\"primary\" onClick={() => {\n                                    const requestOptions = {\n                                        method: 'POST',\n                                        headers: { 'Content-Type': 'application/json' },\n                                        body: JSON.stringify({token: token, meeting_type: \"report\"})\n                                    };\n\n                                    // send request to api\n                                    fetch(sessionStorage.getItem('api-host')+'api/trigger_meeting', requestOptions);\n                                }}>\n                                    Report!\n                                </Button>\n                            </Card.Footer>\n                        </Card>\n\n                    </CardDeck>\n                </Col>\n            </Row>\n\n\n            <Modal show={showProfile}>\n                <Modal.Header closeButton>\n                    <Modal.Title>\n                        Who am I?   \n                    </Modal.Title>\n                </Modal.Header>\n                    <Modal.Body>\n                    <p>Your name is {profile.username}</p>\n                    <p>You are {profile.is_imposter ? \"an Imposter\" : \"a Crewmate\"}. </p>\n                    {profile.is_imposter && \n                    <div>Imposters are: {profile.imposter_list.join(', ')}</div>\n                    }\n                    </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"primary\" onClick={handleCloseProfile}>\n                        Ok\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n\n\n            <Modal show={showDead}>\n                <Modal.Header closeButton>\n                    <Modal.Title>\n                        Are you sure?\n                    </Modal.Title>\n                </Modal.Header>\n                    <Modal.Body>\n                    <p>\n                        Are you sure that you are dead?\n                    </p>\n                    </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleCloseDead}>\n                        No\n                    </Button>\n                    <Button variant=\"danger\" onClick={() => {\n                        const requestOptions = {\n                            method: 'POST',\n                            headers: { 'Content-Type': 'application/json' },\n                            body: JSON.stringify({token: token})\n                        };\n\n                        fetch(sessionStorage.getItem('api-host')+'api/kill', requestOptions).then(response => response.json()).then((data)=>{\n                            if (data.success) {\n                                history.push('/lobby');\n                            }\n                        })\n                    }}>\n                        Yes\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n            \n        </Container>\n    );\n}\n\nfunction Task(props) {\n    const task = props.task;\n    const token = props.token;\n    const profile = props.profile;\n\n    const {register, handleSubmit} = useForm();\n\n    const [errorMessage, setErrorMessage] = useState('');\n    const [showError, setShowError] = useState(false);\n    const [showSecret, setShowSecret] = useState(false);\n    const [showInput, setShowInput] = useState(false);\n\n\n    const handleClose = () => {\n        setShowError(false);\n    }\n\n    const onSubmitCode = (data) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({token: token, secret_code: data.code})\n        };\n\n        fetch(sessionStorage.getItem('api-host')+'api/validate_code', requestOptions).then(response => response.json()).then((data) => {\n            if (!data.success) {\n                setShowError(true);\n                setErrorMessage(data.reason);\n            }\n        });\n    };\n\n    return (\n        <Container>\n            <Jumbotron> \n                {task != null &&\n                <div>\n                    <h2>Your next task...</h2>\n                    <h4>\n                        Go to {task.room}.\n                    </h4>\n                    {task.task_type == \"sender\" &&\n                        <div>\n                            <p>You are the sender. Click the button below to see the secret code.</p>\n                                <Button onClick={() => setShowSecret(true)}>\n                                    Show\n                                </Button>\n                            <p>\n                                Share this with the other person in the room.\n                            </p>\n                            <Modal show={showSecret} onHide={() => setShowSecret(false)} size=\"lg\" centered>\n                                <Modal.Header closeButton> </Modal.Header>\n                                <Modal.Body closeButton>\n                                    <h2 style={{'margin': '30vh 10vh 30vh 10vh', 'text-align': 'center'}}>\n                                        {task.secret_code.slice(0, 4)}-{task.secret_code.slice(4, 8)}\n                                    </h2>\n                                </Modal.Body>\n                                \n                            </Modal>\n                        </div>   \n                    }\n                    {(task.task_type == \"receiver\" || profile.is_imposter)&&\n                        <div>\n                            <p>\n                                You are the receiver. Ask the other person in the room for the secret code.\n                            </p>\n                            <p>\n                                <Button onClick={() => setShowInput(true)}>\n                                    Enter Code\n                                </Button>\n                            </p>\n                            <Modal show={showInput} onHide={() => setShowInput(false)} size=\"lg\" centered>\n                                <Modal.Header closeButton> </Modal.Header>\n                                <Modal.Body>\n                                    <Form onSubmit={handleSubmit(onSubmitCode)} style={{'margin': '30vh 10vh 30vh 10vh', 'text-align': 'center'}}>\n                                        <Form.Group>\n                                            <Form.Label>Secret Code:</Form.Label>\n                                            <Form.Control type=\"text\" name=\"code\" ref={register()}>\n                                            </Form.Control>\n                                        </Form.Group>\n                                        <Button variant=\"primary\" type=\"submit\" onClick={()=> setShowInput(false)}>\n                                            Submit\n                                        </Button>\n                                    </Form>\n                                </Modal.Body>\n                            </Modal>\n                        </div>\n                    }\n                </div>\n                }\n                {task == null && \n                <div>\n                    <h1>No task received yet.</h1>\n                </div>\n                }\n            </Jumbotron>\n            <Modal show={showError} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>\n                        Error   \n                    </Modal.Title>\n                    </Modal.Header>\n                        <Modal.Body>\n                            {errorMessage}\n                        </Modal.Body>\n                    <Modal.Footer>\n                    <Button variant=\"primary\" onClick={handleClose}>\n                        Ok\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </Container>\n        \n    )\n}\n\nfunction SecretMenu(props) {\n    const task = props.task;\n    const profile = props.profile;\n    const [disable, setDisable] = useState(true);\n    useEffect(() => {\n        console.log('ran');\n    });\n\n    return (\n        <div>\n            {profile.is_imposter && \n            <div>\n            <h3>Sabotage Menu</h3>\n            <p>Shhhhhh... Don't show anyone else this page.</p>\n            {props.task != null &&\n                <CountdownTimer expiry={task.sabotage_expire} onExpire={()=>setDisable(false)} during={()=>setDisable(true)} />\n            }\n            <CardDeck>\n                <Card>\n                    <Card.Header as=\"h5\">Dummify</Card.Header>\n                    <Card.Body>\n                        <Card.Text>Turn 25% of current tasks to dummy tasks.</Card.Text>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button onClick={() => {\n                            const requestOptions = {\n                                method: 'POST',\n                                headers: { 'Content-Type': 'application/json' },\n                                body: JSON.stringify({token: props.token, type: 'dummify'})\n                            };\n                    \n                            fetch(sessionStorage.getItem('api-host')+'api/sabotage', requestOptions)\n                        }} disabled={disable}>\n                            Dummify\n                        </Button>\n                    </Card.Footer>\n                </Card>\n\n                <Card>\n                    <Card.Header as=\"h5\">Core Meltdown</Card.Header>\n                    <Card.Body>\n                        <Card.Text>Make the crewmatese type in a passage in the reactor console in order to save the reactor.</Card.Text>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button onClick={()=>{\n                            const requestOptions = {\n                                method: 'POST',\n                                headers: { 'Content-Type': 'application/json' },\n                                body: JSON.stringify({token: props.token, type: 'meltdown'})\n                            };\n                    \n                            fetch(sessionStorage.getItem('api-host')+'api/sabotage', requestOptions)\n                        }}disabled={disable}>\n                            Sabotage\n                        </Button>\n                    </Card.Footer>\n                </Card>\n\n            </CardDeck>\n            </div>\n            }\n            {!profile.is_imposter && \n                <p>You are a crewmate. There are no secrets for you :(</p>\n            }\n        </div>\n    );\n}\n\nfunction Game() {\n\n    const [profile, setProfile] = useState({is_imposter: false, imposter_list: [], username: ''});\n    const [task, setTask] = useState(null);\n    const socket = useContext(SocketContext);\n    const [progress, setProgress] = useState({completed:0, total:1});\n    const [reactorStatus, setReactorStatus] = useState({'reactor_state': 'normal'});\n\n    const [showToast, setShowToast] = useState(false);\n    const [toastMessage, setToastMessage] = useState('');\n    \n    const token = sessionStorage.getItem('game-token');\n    const history = useHistory();\n\n    if (token == null) {\n        history.push('/');\n    }\n\n\n    useEffect(() => {\n        // send a go online signal and request user list\n        socket.emit(\"go online\", {token: token, class: 'player'});\n\n\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({token: token})\n        };\n\n        fetch(sessionStorage.getItem('api-host')+'api/player_profile', requestOptions).then(response => response.json()).then((data) => {\n            setProfile(data);\n            if (!data.success) {\n                history.push('/lobby');\n            }\n            if (data.dead) {\n                history.push('/lobby');\n            }\n            if (data.is_imposter){\n                console.log('I am an imposter');\n                console.log(data.imposter_list);\n            } else {\n                console.log(data);\n                console.log('Not Imposter');\n            }\n        });\n    }, []);    \n\n    useEffect(() => {\n        socket.on(\"lobby update\", (data) => {\n            if (data.game_state == 'meeting') {\n                history.push('/vote');\n            }else if (data.game_state == 'end'){\n                history.push('/end');\n            }else if (data.game_state == 'lobby') {\n                history.push('/lobby');\n            }\n        });\n    });\n\n\n    useEffect(() => {\n        socket.on(\"task update\", (data) => {\n            console.log(data);\n            setTask(data);\n        });\n    });\n\n    useEffect(() => {\n        socket.on(\"change state\", (data) => {\n            if (data.state == 'lobby'){\n                history.push('/lobby');\n            }else if (data.state == 'meeting') {\n                history.push('/vote');\n            }else if (data.state == 'end') {\n                history.push('/end')\n            }\n        });\n    });\n\n    useEffect(() => {\n        socket.on(\"task complete\", (data) => {\n            setShowToast(true);\n            if (data.dummy){\n                setToastMessage('Oops. That was a dummy task. Guess I just wasted your time. Proceed to your next task 🥴🥴');\n            }else{\n                setToastMessage('Well Done! You have completed a task.');\n            }\n        });\n    });\n\n    useEffect(() => {\n        socket.on(\"reactor update\", (data) => {\n            console.log(data);\n            setReactorStatus(data);\n        });\n    });\n\n    useEffect(() => {\n        socket.on(\"lobby update\", (data) => {\n            setProgress(data.task_status);\n        });\n    });\n\n    return (\n        <Container style={{'topMargin': '5vh'}}>\n\n            <Row>\n                <Col>\n                    <div>\n                        <h4>Task Progress</h4>\n                        <p>{progress.completed} out of {progress.total} completed.</p>\n                        \n                    </div>\n                </Col>\n                <Col>\n                    <Button style={{float: 'right'}} onClick={() => socket.emit(\"go online\", {token: token, class: 'player'})}>\n                        <ArrowRepeat size={30}/>\n                    </Button>\n                </Col>\n            </Row>\n            <Row style={{margin: '2vh'}}>\n                <Col>\n                    <ProgressBar striped variant=\"success\" now={Math.round(progress.completed/progress.total*100)}/>\n                </Col>\n            </Row>\n            {reactorStatus.reactor_state != \"normal\" &&\n            <Row style={{margin: '2vh'}}>\n                <Col>\n                    <ReactorMeltdown reactorStatus={reactorStatus}/>\n                </Col>\n            </Row>\n            }\n\n\n            <Tabs defaultActiveKey=\"home\">\n                    <Tab eventKey=\"home\" title=\"Home\">\n                        <div className='tabContent'>\n                        <Home profile={profile} token={token} history={history} progress={progress}/>\n                        </div>\n                    </Tab>\n                    <Tab eventKey=\"tasks\" title=\"Tasks\">\n                        <div className='tabContent'>\n                        <Task task={task} token={token} profile={profile}/>\n                        </div>\n                    </Tab>\n                    <Tab eventKey=\"screte\" title=\"Secret Menu\">\n                        <div className='tabContent'>\n                        <SecretMenu profile={profile} token={token} history={history} task={task}/>\n                        </div>\n                    </Tab>\n            </Tabs>\n            <Toast show={showToast} onClose={()=>{setShowToast(false)}} style={{position: 'absolute', top: '5vh', right: '5vh'}}>\n                <Toast.Header>Notification</Toast.Header>\n\n                <Toast.Body>{toastMessage}</Toast.Body>\n            </Toast>\n        </Container>\n    );\n}\n\nexport default Game;","/home/darentang/projects/real-life-among-us/frontend/app/src/reportWebVitals.js",[],["133","134"],"/home/darentang/projects/real-life-among-us/frontend/app/src/components/Login.js",["135","136","137","138","139","140"],"import React, { useEffect, useState, useContext } from \"react\";\n\n// boostrap components\nimport Container from 'react-bootstrap/Container'\nimport Jumotron from 'react-bootstrap/Jumbotron'\nimport Form from 'react-bootstrap/Form'\nimport FormGroup from 'react-bootstrap/FormGroup'\nimport Button from 'react-bootstrap/Button'\nimport Modal from 'react-bootstrap/Modal'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport ToggleButton from 'react-bootstrap/ToggleButton'\n\nimport {useForm} from 'react-hook-form';\n\nimport { useHistory } from \"react-router-dom\";\n\n\n\n\n// Login Page\nfunction Login() {\n    // state variables\n    const [showError, setShowError] = useState(false);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    const [inputMode, setInputMode] = useState(\"1\");\n\n    const {register, handleSubmit} = useForm();\n\n    const radios = [\n        {name: 'User', value:'1'},\n        {name: 'Console', value:'2'}\n    ];\n\n\n    // Open and close handles\n    const handleClose = () => setShowError(false);\n    const handleOpen = () => setShowError(true);\n\n    const history = useHistory();\n    const token = sessionStorage.getItem('game-token');\n\n\n\n\n    // submit username\n    const onSubmitUsername = (data) => {\n        // request options\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({username: data.username})\n        };\n\n        // send request to api\n        fetch(sessionStorage.getItem('api-host')+'api/add_user', requestOptions).then(response => response.json()).then(\n            data => {\n                console.log('HTTP POST SENT and RECIEVED'); \n                // if successful, save usertoken as cookie\n                if (data.success) {\n                    sessionStorage.setItem('game-token', data.token);\n                    sessionStorage.setItem('game-type', 'player');\n                    // redirect to lobby\n                    history.push('/lobby');\n                }\n                // else, open the modal\n                else {\n                    handleOpen();\n                    setErrorMessage(data.reason);\n                }\n            }\n        );\n    };\n\n    const onSubmitConsole = (data) => {\n        // request options\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({location: data.location, type: data.type})\n        };\n\n        // send request to api\n        fetch(sessionStorage.getItem('api-host')+'api/add_console', requestOptions).then(response => response.json()).then(\n            data => {\n                console.log('HTTP POST SENT and RECIEVED'); \n                // if successful, save usertoken as cookie\n                if (data.success) {\n                    sessionStorage.setItem('game-token', data.token);\n                    sessionStorage.setItem('game-type', 'console');\n                    // redirect to lobby\n                    history.push('/console');\n                }\n                // else, open the modal\n                else {\n                    handleOpen();\n                    setErrorMessage(data.reason);\n                }\n            }\n        );\n    };\n\n    useEffect(()=>{\n        if (token != null) {\n            const requestOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({token: token})\n            };\n    \n            fetch(sessionStorage.getItem('api-host')+'api/player_profile', requestOptions).then(response => response.json()).then((data) => {\n                if (data.success) {\n                    if (data.type == 'player') {\n                        history.push('/lobby');\n                    } else if  (data.type == 'console'){\n                        history.push('/console');\n                    }\n                }\n            });\n        }\n    }, [])\n\n    useEffect(()=>{console.log('Input mode ' + inputMode);}, [inputMode]);\n\n\n    const playerForm = (\n        <Form onSubmit={handleSubmit(onSubmitUsername)}>\n            <FormGroup controlId=\"username-input\">\n                <Form.Label>Username</Form.Label>\n                <Form.Control type=\"text\" placeholder=\"Enter username\" name=\"username\" ref={register()}>\n                </Form.Control>\n            </FormGroup>\n            <Button variant=\"primary\" type=\"submit\" block>\n                Submit\n            </Button>\n        </Form>\n    );\n\n    const consoleForm = (\n        <Form onSubmit={handleSubmit(onSubmitConsole)}>\n            <FormGroup controlId=\"consol-loc\">\n                <Form.Label>Console Location</Form.Label>\n                <Form.Control type=\"text\" placeholder=\"Console Location\" name=\"location\" ref={register()}>\n                </Form.Control>\n            </FormGroup>\n            <FormGroup>\n                <Form.Label>Type</Form.Label>\n                <Form.Control as=\"select\" name=\"type\" ref={register()}>\n                    <option>Meeting Room</option>\n                    <option>Reactor</option>\n                </Form.Control>\n            </FormGroup>\n            <Button variant=\"primary\" type=\"submit\" block>\n                Submit\n            </Button>\n        </Form>\n    )\n\n    function InputForm(props) {\n        if (props.mode == '1') {\n            return playerForm;\n        } else if (props.mode == '2') {\n            return consoleForm;\n        }\n    }\n\n\n    return (\n        <Container>\n        <Jumotron className=\"Login-jumbo\">\n            <h1 className=\"App-header\">Real-Life Among Us</h1>\n            <ButtonGroup toggle>\n                {\n                    radios.map((radio, idx) => (\n                        <ToggleButton\n                            key={idx}\n                            variant=\"secondary\"\n                            type=\"radio\"\n                            value={radio.value}\n                            checked={inputMode === radio.value}\n                            onChange={(e) => setInputMode(e.currentTarget.value)}\n                        >\n                            {radio.name}\n                        </ToggleButton>\n                    ))\n                }\n            </ButtonGroup>\n            <InputForm mode={inputMode}/>\n\n        </Jumotron>\n\n            {/* username taken error */}\n            <Modal show={showError} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>\n                        Error   \n                    </Modal.Title>\n                    </Modal.Header>\n                        <Modal.Body>\n                            {errorMessage}\n                        </Modal.Body>\n                    <Modal.Footer>\n                    <Button variant=\"primary\" onClick={handleClose}>\n                        Ok\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        \n        </Container>\n    );\n}\n\nexport default Login;","/home/darentang/projects/real-life-among-us/frontend/app/src/components/Dev.js",["141","142","143"],"import React, { useEffect, useState, useContext } from \"react\";\n// import io from 'socket.io-client';\nimport io from 'socket.io-client';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\n\nimport SocketContext from '../utilities/socket-context'\n\nimport {\n    DisplayConsoleList, \n    DisplayPlayerListDebug, \n    DisplayGameSettings,\n    EditGameSettings,\n    BlockModal,\n    DisplayTasks\n} from \"../utilities/lobbies.js\"\n\n\nfunction Dev() {\n    // player list state\n    const [playerList, setPlayerList] = useState([]);\n    const [consoleList, setConsoleList] = useState([]);\n    const [taskList, setTaskList] = useState([]);\n    const [gameSettings, setGameSettings] = useState(null);\n    const [gameState, setGameState] = useState(\"\");\n\n    \n    // const token = fromCookie('game-token');\n    const token = 'dev';\n\n    const socket = useContext(SocketContext);\n    \n    useEffect(() => {\n        socket.emit(\"go online\", {token: token});\n    }, []);\n\n    useEffect(() => {\n        socket.on(\"lobby update dev\", (data) => {\n            // update list\n            console.log(data);\n            setPlayerList(data.users);\n            setConsoleList(data.consoles);\n            setGameSettings(data.game_settings);\n            setGameState(data.game_state);\n            setTaskList(data.tasks);\n        });\n    });\n    \n    \n\n    return(\n        <Container>\n            <h1>Dev</h1>\n            <h4>Debug Tools</h4>\n            <Row>\n                <Col>\n                    <Button onClick={() => {\n                        let socket = io(\"http://192.168.0.30:5000\");\n                        socket.on('connect', function() {\n                            socket.emit('test', {data: 'Im connected!'});\n                        });\n                    }}>\n                        API Test\n                    </Button>\n                </Col>\n                <Col>\n                    <Button onClick={() => {\n                        // request options\n                        const requestOptions = {\n                            method: 'POST',\n                            headers: { 'Content-Type': 'application/json' },\n                            body: JSON.stringify({token: token, duration: 0})\n                        };\n\n                        // send request to api\n                        fetch(sessionStorage.getItem('api-host')+'api/start_game', requestOptions);\n                    }}>\n                        Start Game\n                    </Button>\n                </Col>\n                <Col>\n                    <Button onClick={() => {\n                        // request options\n                        const requestOptions = {\n                            method: 'POST',\n                            headers: { 'Content-Type': 'application/json' },\n                            body: JSON.stringify({token: token, state: 'game'})\n                        };\n\n                        // send request to api\n                        fetch(sessionStorage.getItem('api-host')+'api/change_state', requestOptions);\n                    }}>\n                        Set Game\n                    </Button>\n                </Col>\n                <Col>\n                    <Button onClick={() => {\n                        // request options\n                        const requestOptions = {\n                            method: 'POST',\n                            headers: { 'Content-Type': 'application/json' },\n                            body: JSON.stringify({token: token, state: 'lobby'})\n                        };\n\n                        // send request to api\n                        fetch(sessionStorage.getItem('api-host')+'api/change_state', requestOptions);\n                    }}>\n                        Set Lobby\n                    </Button>\n                </Col>\n                <Col>\n                    <Button onClick={() => {\n                        const requestOptions = {\n                            method: 'POST',\n                            headers: { 'Content-Type': 'application/json' },\n                            body: JSON.stringify({token: token})\n                        };\n\n                        fetch(sessionStorage.getItem('api-host')+'api/reset', requestOptions);\n                    }}>\n                        Reset\n                    </Button>\n                </Col>\n                <Col>\n                    <Button onClick={() => {\n                        const requestOptions = {\n                            method: 'GET'\n                        };\n\n                        fetch(sessionStorage.getItem('api-host')+'api/populate', requestOptions);\n                    }}>\n                        Populate\n                    </Button>\n                </Col>\n                <Col>\n                    Game State: {gameState}\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <h4>Players</h4>\n                    <DisplayPlayerListDebug list={playerList} editable={true} className=\"Lobby-table\"/>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <h4>Consoles</h4>\n                    <DisplayConsoleList list={consoleList} editable={true} debug={true} className=\"Lobby-table\"/>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <h4>Tasks</h4>\n                    <DisplayTasks task={taskList}/>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <h4>Game Settings</h4>\n                    <DisplayGameSettings settings={gameSettings}/>\n                </Col>\n            </Row>\n        </Container>\n\n    );\n}\n\n\nexport default Dev;","/home/darentang/projects/real-life-among-us/frontend/app/src/components/Lobby.js",["144","145","146","147","148","149"],"import React, { useEffect, useState, useContext } from \"react\";\n// import io from 'socket.io-client';\nimport io from 'socket.io-client';\nimport Container from 'react-bootstrap/Container';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Button from 'react-bootstrap/Button';\n\nimport { useHistory } from \"react-router-dom\";\n\nimport {DisplayPlayerList, DisplayGameSettings, BlockModal} from \"../utilities/lobbies.js\"\nimport SocketContext from '../utilities/socket-context'\n\nfunction Lobby() {\n    // player list state\n    const [playerList, setPlayerList] = useState([]);\n    const [gameSettings, setGameSettings] = useState(null);\n    const [playerName, setPlayerName] = useState('');\n    const [dead, setDead] = useState(false);\n    const [showModal, setShowModal] = useState(false);\n    const [countDown, setCountDown] = useState({time: null, countdown: null});\n    const [gameState, setGameState] = useState('');\n    const [remain ,setRemain] = useState(0);\n    \n    // const token = fromCookie('game-token');\n    const token = sessionStorage.getItem('game-token');\n    const history = useHistory();\n\n    // no token then return to homepage\n    if (token == null) {\n        history.push('/');\n    }\n\n    // let socket;\n    const socket = useContext(SocketContext);\n    \n    useEffect(() => {\n        socket.emit(\"go online\", {token: token, class: 'player'});\n    }, []);\n\n    useEffect(() => {\n        // when receiving a lobby list, update playerList state.\n        // If not successful, return to home page.\n        socket.on(\"lobby update\", (data) => {\n            if (data.success){\n                // update list\n                console.log(data);\n                setPlayerList(data.users);\n                for (const i in data.users) {\n                    if (data.users[i].token == token) {\n                        setPlayerName(data.users[i].name);\n                        setDead(data.users[i].dead);\n                        break;\n                    }\n                }\n                setGameSettings(data.game_settings);\n                setGameState(data.game_state);\n            } else {\n                // not authorised, return to index\n                history.push('/');\n            }\n        });\n    });\n\n\n    useEffect(() => {\n        if (socket){\n            socket.on('change state', (data) => {\n                if (data.state == 'game'){\n                    history.push('/game');\n                }\n            });\n        }\n    });\n\n    useEffect(() => {\n        let timer;\n        if (socket){\n            socket.on(\"start game\", (data) => {\n                setCountDown(data);\n                setShowModal(true);\n            });\n        }\n\n        // calculate time until\n        if (countDown.time != null && remain >= 0){\n            timer = setInterval(()=>{\n                const timeUntil = countDown.time + countDown.countdown*1000 - Date.now();  \n                setRemain(Math.max(Math.floor(timeUntil / 1000), 0));\n            }, 500);\n        }\n        \n        return () => clearInterval(timer);\n    }, [remain, countDown]);\n\n\n    return(\n        <Container>\n            <Jumbotron className=\"Login-jumbo\">\n                <h1>Lobby</h1>\n                <div>\n                    Your name is {playerName}.\n                    {dead &&\n                        <div>\n                            <p>You are dead :(</p>\n                        </div>\n                    }\n                    { (gameState == \"game\" && !dead) &&\n                        <div>\n                            <p>\n                            Looks like the game has started. Press the button below to join game.\n                            </p>\n                            <Button onClick={() => history.push('/game')}>\n                                Join\n                            </Button>\n                            \n                        </div>\n\n                    }\n                </div>\n            </Jumbotron>\n            <h4>Players</h4>\n            <DisplayPlayerList list={playerList} className=\"Lobby-table\"/>\n            <h4>Game Settings</h4>\n            <DisplayGameSettings settings={gameSettings}/>\n            <BlockModal show={showModal} remainingTime={remain} countDown={countDown}/>\n        </Container>\n    );\n}\n\n\nexport default Lobby;","/home/darentang/projects/real-life-among-us/frontend/app/src/components/Connect.js",["150","151","152"],"import React, { useEffect, useState, useContext } from \"react\";\n\n\n\n// boostrap components\nimport Container from 'react-bootstrap/Container'\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport Form from 'react-bootstrap/Form'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport Button from 'react-bootstrap/Button'\nimport Modal from 'react-bootstrap/Modal'\n\nimport {useForm} from 'react-hook-form';\n\n\n\nfunction Connect(props) {\n\n    const {register, handleSubmit} = useForm();\n    const [modalState, setModalState] = useState({show: false, message: ''});\n    const handleHide = () => {\n        setModalState({show: false, message: modalState.message});\n    }\n\n    function checkConnect(data) {\n        if (data.address == '') {\n            return;\n        }\n        // let address;\n        // if (data.port == ''){\n        //     address = data.protocol + data.address + '/';\n        // } else {\n        //     address = data.protocol + data.address + `:${data.port}/`;\n        // }\n        const address = data.address;\n        const requestOptions = {\n            method: 'POST', \n            headers: { 'Content-Type': 'application/json' }\n        };\n        console.log(address);\n        setModalState({show: true, message: 'Trying to connect...'});\n        fetch(address + 'api/check_connection', requestOptions).then(response => response.json()).then(data => {\n            if (data.success) {\n                setModalState({\n                    show:true, message: 'Connected to ' + address\n                });\n                sessionStorage.setItem('api-host', address);\n                props.setAddress(address);\n            }\n        }).catch(\n            error => {\n                setModalState({\n                    show: true, message: 'The following occurred while attempting to connect:\\n' + error\n                })\n            }\n        );   \n    };\n\n    return (\n        <Container>\n            <Jumbotron>\n                <h1>Connect</h1>\n\n                <Form onSubmit={handleSubmit(checkConnect)}>\n                    <Form.Group>\n                        <Form.Label>Server Address</Form.Label>\n                        <InputGroup>\n                            {/* <InputGroup.Prepend>\n                                <Form.Control as=\"select\" name='protocol' ref={register()} defaultValue=\"https://\">\n                                    <option>http://</option>\n                                    <option>https://</option>\n                                </Form.Control>\n                            </InputGroup.Prepend> */}\n                            <Form.Control name=\"address\" ref={register()} ></Form.Control>\n                            {/* <InputGroup.Append>\n                                <Form.Control name='port' ref={register()} defaultValue=\"5000\">\n                                </Form.Control>\n                            </InputGroup.Append> */}\n                        </InputGroup>\n                    </Form.Group>\n                    <Button type=\"submit\">Connect</Button>\n                </Form>\n            </Jumbotron>\n            <Modal show={modalState.show} onHide={handleHide} closeButton>\n                <Modal.Header>Information</Modal.Header>\n                <Modal.Body>{modalState.message}</Modal.Body>\n            </Modal>\n        </Container>\n    );\n}\n\nexport default Connect;",{"ruleId":"153","severity":1,"message":"154","line":29,"column":8,"nodeType":"155","endLine":29,"endColumn":10,"suggestions":"156"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","replacedBy":"160"},{"ruleId":"161","severity":1,"message":"162","line":30,"column":9,"nodeType":"163","messageId":"164","endLine":30,"endColumn":16},{"ruleId":"153","severity":1,"message":"165","line":38,"column":6,"nodeType":"155","endLine":38,"endColumn":15,"suggestions":"166"},{"ruleId":"153","severity":1,"message":"167","line":82,"column":8,"nodeType":"155","endLine":82,"endColumn":10,"suggestions":"168"},{"ruleId":"169","severity":1,"message":"170","line":103,"column":23,"nodeType":"171","messageId":"172","endLine":103,"endColumn":25},{"ruleId":"153","severity":1,"message":"165","line":126,"column":8,"nodeType":"155","endLine":126,"endColumn":27,"suggestions":"173"},{"ruleId":"169","severity":1,"message":"170","line":134,"column":28,"nodeType":"171","messageId":"172","endLine":134,"endColumn":30},{"ruleId":"169","severity":1,"message":"170","line":145,"column":28,"nodeType":"171","messageId":"172","endLine":145,"endColumn":30},{"ruleId":"169","severity":1,"message":"170","line":165,"column":28,"nodeType":"171","messageId":"172","endLine":165,"endColumn":30},{"ruleId":"169","severity":1,"message":"170","line":195,"column":78,"nodeType":"171","messageId":"172","endLine":195,"endColumn":80},{"ruleId":"169","severity":1,"message":"170","line":199,"column":80,"nodeType":"171","messageId":"172","endLine":199,"endColumn":82},{"ruleId":"169","severity":1,"message":"170","line":207,"column":28,"nodeType":"171","messageId":"172","endLine":207,"endColumn":30},{"ruleId":"169","severity":1,"message":"170","line":233,"column":33,"nodeType":"171","messageId":"172","endLine":233,"endColumn":35},{"ruleId":"169","severity":1,"message":"170","line":239,"column":36,"nodeType":"171","messageId":"172","endLine":239,"endColumn":38},{"ruleId":"169","severity":1,"message":"170","line":248,"column":18,"nodeType":"171","messageId":"172","endLine":248,"endColumn":20},{"ruleId":"169","severity":1,"message":"174","line":273,"column":48,"nodeType":"171","messageId":"172","endLine":273,"endColumn":50},{"ruleId":"169","severity":1,"message":"174","line":334,"column":39,"nodeType":"171","messageId":"172","endLine":334,"endColumn":41},{"ruleId":"169","severity":1,"message":"170","line":334,"column":76,"nodeType":"171","messageId":"172","endLine":334,"endColumn":78},{"ruleId":"153","severity":1,"message":"175","line":341,"column":8,"nodeType":"155","endLine":341,"endColumn":10,"suggestions":"176"},{"ruleId":"169","severity":1,"message":"174","line":380,"column":30,"nodeType":"171","messageId":"172","endLine":380,"endColumn":32},{"ruleId":"169","severity":1,"message":"170","line":389,"column":24,"nodeType":"171","messageId":"172","endLine":389,"endColumn":26},{"ruleId":"169","severity":1,"message":"170","line":389,"column":46,"nodeType":"171","messageId":"172","endLine":389,"endColumn":48},{"ruleId":"169","severity":1,"message":"170","line":389,"column":68,"nodeType":"171","messageId":"172","endLine":389,"endColumn":70},{"ruleId":"169","severity":1,"message":"170","line":391,"column":27,"nodeType":"171","messageId":"172","endLine":391,"endColumn":29},{"ruleId":"169","severity":1,"message":"170","line":395,"column":27,"nodeType":"171","messageId":"172","endLine":395,"endColumn":29},{"ruleId":"169","severity":1,"message":"170","line":400,"column":25,"nodeType":"171","messageId":"172","endLine":400,"endColumn":27},{"ruleId":"169","severity":1,"message":"170","line":400,"column":61,"nodeType":"171","messageId":"172","endLine":400,"endColumn":63},{"ruleId":"169","severity":1,"message":"170","line":420,"column":25,"nodeType":"171","messageId":"172","endLine":420,"endColumn":27},{"ruleId":"169","severity":1,"message":"174","line":420,"column":61,"nodeType":"171","messageId":"172","endLine":420,"endColumn":63},{"ruleId":"153","severity":1,"message":"177","line":52,"column":8,"nodeType":"155","endLine":52,"endColumn":22,"suggestions":"178"},{"ruleId":"169","severity":1,"message":"170","line":120,"column":47,"nodeType":"171","messageId":"172","endLine":120,"endColumn":49},{"ruleId":"169","severity":1,"message":"170","line":122,"column":53,"nodeType":"171","messageId":"172","endLine":122,"endColumn":55},{"ruleId":"169","severity":1,"message":"170","line":142,"column":40,"nodeType":"171","messageId":"172","endLine":142,"endColumn":42},{"ruleId":"169","severity":1,"message":"170","line":143,"column":40,"nodeType":"171","messageId":"172","endLine":143,"endColumn":42},{"ruleId":"169","severity":1,"message":"170","line":150,"column":28,"nodeType":"171","messageId":"172","endLine":150,"endColumn":30},{"ruleId":"169","severity":1,"message":"170","line":174,"column":40,"nodeType":"171","messageId":"172","endLine":174,"endColumn":42},{"ruleId":"169","severity":1,"message":"170","line":174,"column":68,"nodeType":"171","messageId":"172","endLine":174,"endColumn":70},{"ruleId":"169","severity":1,"message":"170","line":189,"column":48,"nodeType":"171","messageId":"172","endLine":189,"endColumn":50},{"ruleId":"169","severity":1,"message":"170","line":189,"column":76,"nodeType":"171","messageId":"172","endLine":189,"endColumn":78},{"ruleId":"169","severity":1,"message":"170","line":201,"column":28,"nodeType":"171","messageId":"172","endLine":201,"endColumn":30},{"ruleId":"169","severity":1,"message":"170","line":201,"column":56,"nodeType":"171","messageId":"172","endLine":201,"endColumn":58},{"ruleId":"169","severity":1,"message":"170","line":234,"column":28,"nodeType":"171","messageId":"172","endLine":234,"endColumn":30},{"ruleId":"169","severity":1,"message":"170","line":252,"column":35,"nodeType":"171","messageId":"172","endLine":252,"endColumn":37},{"ruleId":"169","severity":1,"message":"170","line":264,"column":40,"nodeType":"171","messageId":"172","endLine":264,"endColumn":42},{"ruleId":"169","severity":1,"message":"170","line":286,"column":43,"nodeType":"171","messageId":"172","endLine":286,"endColumn":45},{"ruleId":"169","severity":1,"message":"170","line":302,"column":27,"nodeType":"171","messageId":"172","endLine":302,"endColumn":29},{"ruleId":"169","severity":1,"message":"170","line":397,"column":27,"nodeType":"171","messageId":"172","endLine":397,"endColumn":29},{"ruleId":"169","severity":1,"message":"170","line":435,"column":27,"nodeType":"171","messageId":"172","endLine":435,"endColumn":29},{"ruleId":"169","severity":1,"message":"170","line":503,"column":22,"nodeType":"171","messageId":"172","endLine":503,"endColumn":24},{"ruleId":"161","severity":1,"message":"179","line":3,"column":8,"nodeType":"163","messageId":"164","endLine":3,"endColumn":10},{"ruleId":"169","severity":1,"message":"174","line":59,"column":33,"nodeType":"171","messageId":"172","endLine":59,"endColumn":35},{"ruleId":"153","severity":1,"message":"180","line":64,"column":8,"nodeType":"155","endLine":64,"endColumn":10,"suggestions":"181"},{"ruleId":"153","severity":1,"message":"182","line":66,"column":5,"nodeType":"163","endLine":66,"endColumn":14,"suggestions":"183"},{"ruleId":"169","severity":1,"message":"174","line":71,"column":36,"nodeType":"171","messageId":"172","endLine":71,"endColumn":38},{"ruleId":"169","severity":1,"message":"170","line":78,"column":35,"nodeType":"171","messageId":"172","endLine":78,"endColumn":37},{"ruleId":"169","severity":1,"message":"170","line":89,"column":32,"nodeType":"171","messageId":"172","endLine":89,"endColumn":34},{"ruleId":"169","severity":1,"message":"170","line":101,"column":35,"nodeType":"171","messageId":"172","endLine":101,"endColumn":37},{"ruleId":"169","severity":1,"message":"174","line":106,"column":35,"nodeType":"171","messageId":"172","endLine":106,"endColumn":37},{"ruleId":"169","severity":1,"message":"170","line":191,"column":37,"nodeType":"171","messageId":"172","endLine":191,"endColumn":39},{"ruleId":"169","severity":1,"message":"170","line":211,"column":38,"nodeType":"171","messageId":"172","endLine":211,"endColumn":40},{"ruleId":"153","severity":1,"message":"180","line":380,"column":8,"nodeType":"155","endLine":380,"endColumn":10,"suggestions":"184"},{"ruleId":"169","severity":1,"message":"170","line":384,"column":33,"nodeType":"171","messageId":"172","endLine":384,"endColumn":35},{"ruleId":"169","severity":1,"message":"170","line":386,"column":39,"nodeType":"171","messageId":"172","endLine":386,"endColumn":41},{"ruleId":"169","severity":1,"message":"170","line":388,"column":39,"nodeType":"171","messageId":"172","endLine":388,"endColumn":41},{"ruleId":"169","severity":1,"message":"170","line":404,"column":28,"nodeType":"171","messageId":"172","endLine":404,"endColumn":30},{"ruleId":"169","severity":1,"message":"170","line":406,"column":34,"nodeType":"171","messageId":"172","endLine":406,"endColumn":36},{"ruleId":"169","severity":1,"message":"170","line":408,"column":34,"nodeType":"171","messageId":"172","endLine":408,"endColumn":36},{"ruleId":"169","severity":1,"message":"174","line":460,"column":42,"nodeType":"171","messageId":"172","endLine":460,"endColumn":44},{"ruleId":"157","replacedBy":"185"},{"ruleId":"159","replacedBy":"186"},{"ruleId":"161","severity":1,"message":"187","line":1,"column":38,"nodeType":"163","messageId":"164","endLine":1,"endColumn":48},{"ruleId":"169","severity":1,"message":"170","line":112,"column":35,"nodeType":"171","messageId":"172","endLine":112,"endColumn":37},{"ruleId":"169","severity":1,"message":"170","line":114,"column":43,"nodeType":"171","messageId":"172","endLine":114,"endColumn":45},{"ruleId":"153","severity":1,"message":"175","line":120,"column":8,"nodeType":"155","endLine":120,"endColumn":10,"suggestions":"188"},{"ruleId":"169","severity":1,"message":"170","line":159,"column":24,"nodeType":"171","messageId":"172","endLine":159,"endColumn":26},{"ruleId":"169","severity":1,"message":"170","line":161,"column":31,"nodeType":"171","messageId":"172","endLine":161,"endColumn":33},{"ruleId":"161","severity":1,"message":"189","line":16,"column":5,"nodeType":"163","messageId":"164","endLine":16,"endColumn":21},{"ruleId":"161","severity":1,"message":"190","line":17,"column":5,"nodeType":"163","messageId":"164","endLine":17,"endColumn":15},{"ruleId":"153","severity":1,"message":"165","line":38,"column":8,"nodeType":"155","endLine":38,"endColumn":10,"suggestions":"191"},{"ruleId":"161","severity":1,"message":"179","line":3,"column":8,"nodeType":"163","messageId":"164","endLine":3,"endColumn":10},{"ruleId":"153","severity":1,"message":"167","line":38,"column":8,"nodeType":"155","endLine":38,"endColumn":10,"suggestions":"192"},{"ruleId":"169","severity":1,"message":"170","line":49,"column":45,"nodeType":"171","messageId":"172","endLine":49,"endColumn":47},{"ruleId":"169","severity":1,"message":"170","line":68,"column":32,"nodeType":"171","messageId":"172","endLine":68,"endColumn":34},{"ruleId":"153","severity":1,"message":"165","line":93,"column":8,"nodeType":"155","endLine":93,"endColumn":27,"suggestions":"193"},{"ruleId":"169","severity":1,"message":"170","line":107,"column":34,"nodeType":"171","messageId":"172","endLine":107,"endColumn":36},{"ruleId":"161","severity":1,"message":"194","line":1,"column":17,"nodeType":"163","messageId":"164","endLine":1,"endColumn":26},{"ruleId":"161","severity":1,"message":"187","line":1,"column":38,"nodeType":"163","messageId":"164","endLine":1,"endColumn":48},{"ruleId":"169","severity":1,"message":"170","line":26,"column":26,"nodeType":"171","messageId":"172","endLine":26,"endColumn":28},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["195"],"no-native-reassign",["196"],"no-negated-in-lhs",["197"],"no-unused-vars","'history' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.",["198"],"React Hook useEffect has missing dependencies: 'socket' and 'token'. Either include them or remove the dependency array.",["199"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["200"],"Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'history' and 'token'. Either include them or remove the dependency array.",["201"],"React Hook useEffect has a missing dependency: 'expiry'. Either include it or remove the dependency array.",["202"],"'io' is defined but never used.","React Hook useEffect has missing dependencies: 'history', 'socket', and 'token'. Either include them or remove the dependency array.",["203"],"React Hook useEffect contains a call to 'setDisable'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [socket, tally.tally, profile.id] as a second argument to the useEffect Hook.",["204"],["205"],["196"],["197"],"'useContext' is defined but never used.",["206"],"'EditGameSettings' is defined but never used.","'BlockModal' is defined but never used.",["207"],["208"],["209"],"'useEffect' is defined but never used.",{"desc":"210","fix":"211"},"no-global-assign","no-unsafe-negation",{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},{"desc":"216","fix":"217"},{"desc":"218","fix":"219"},{"desc":"220","fix":"221"},{"desc":"222","fix":"223"},{"desc":"224","fix":"225"},{"desc":"222","fix":"226"},{"desc":"218","fix":"227"},{"desc":"228","fix":"229"},{"desc":"214","fix":"230"},{"desc":"216","fix":"231"},"Update the dependencies array to be: [history]",{"range":"232","text":"233"},"Update the dependencies array to be: [address, socket]",{"range":"234","text":"235"},"Update the dependencies array to be: [socket, token]",{"range":"236","text":"237"},"Update the dependencies array to be: [remain, countDown, socket]",{"range":"238","text":"239"},"Update the dependencies array to be: [history, token]",{"range":"240","text":"241"},"Update the dependencies array to be: [expiry, props.expiry]",{"range":"242","text":"243"},"Update the dependencies array to be: [history, socket, token]",{"range":"244","text":"245"},"Add dependencies array: [socket, tally.tally, profile.id]",{"range":"246","text":"247"},{"range":"248","text":"245"},{"range":"249","text":"241"},"Update the dependencies array to be: [socket]",{"range":"250","text":"251"},{"range":"252","text":"237"},{"range":"253","text":"239"},[974,976],"[history]",[1005,1014],"[address, socket]",[2338,2340],"[socket, token]",[3628,3647],"[remain, countDown, socket]",[11569,11571],"[history, token]",[1559,1573],"[expiry, props.expiry]",[2133,2135],"[history, socket, token]",[2708,2708],", [socket, tally.tally, profile.id]",[15044,15046],[3982,3984],[1068,1070],"[socket]",[1377,1379],[3050,3069]]